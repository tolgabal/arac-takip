import customtkinter as ctkfrom widgets import AracButtonFactoryclass MainWindow:    def __init__(self, root):        self.root = root        self.root.geometry("1000x450")        self.root.title("Ara√ß Takip")        # üé® Yeni renkler        self.bg_color = "#35374B"        self.sidebar_color = "#344955"        self.button_color = "#50727B"        self.hover_color = "#78A083"  # G√∂rsel ama√ßlƒ± tanƒ±mlƒ±, ancak widget'lara aktarƒ±lmayacak.        self.text_color = "#FFFFFF"        self.root.configure(bg=self.bg_color)        self.sidebar_visible = True        # Ana ekran frame        self.main_frame = ctk.CTkFrame(self.root, fg_color=self.bg_color)        self.main_frame.pack(fill="both", expand=True)        # Arama √ßubuƒüu i√ßin frame        self.search_frame = ctk.CTkFrame(self.main_frame, fg_color=self.bg_color)        self.search_frame.pack(pady=10)        # Arama alanƒ±        self.search_entry = ctk.CTkEntry(            self.search_frame,            placeholder_text="Ara...",            width=300, height=30, corner_radius=15,            fg_color=self.sidebar_color, text_color=self.text_color,            border_color=self.button_color        )        self.search_entry.grid(row=0, column=0, padx=(20, 5))        # Arama butonu        self.search_button = ctk.CTkButton(            self.search_frame,            text="üîç",            width=50, height=30,            corner_radius=15,            fg_color=self.button_color,            text_color=self.text_color        )        self.search_button.grid(row=0, column=1, padx=(25, 20))                # --- Yeni eklenen bile≈üenler ---        # Switch: Ara√ß Kullanƒ±cƒ±sƒ± / Ara√ß (g√∂rsel ama√ßlƒ±)        self.vehicle_switch = ctk.CTkSwitch(            self.search_frame,            text="Ara√ß Kullanƒ±cƒ±sƒ±/Ara√ß",            width=150, height=30, corner_radius=15,            fg_color=self.sidebar_color, text_color=self.text_color,            button_color=self.button_color        )        self.vehicle_switch.grid(row=0, column=2, padx=(5, 5))        # Ara√ß Ekle Butonu (g√∂rsel ama√ßlƒ±)        self.add_vehicle_button = ctk.CTkButton(            self.search_frame,            text="Ara√ß Ekle",            width=80, height=30,            corner_radius=15,            fg_color=self.button_color,            text_color=self.text_color        )        self.add_vehicle_button.grid(row=0, column=3, padx=(5, 5))        # Option Nesnesi: Muayene tarihi se√ßenekleri (g√∂rsel ama√ßlƒ±)        self.inspection_option = ctk.CTkOptionMenu(            self.search_frame,            values=["Muayene Tarihi En Yakƒ±n", "Muayene Tarihi En Uzak"],            width=180, height=30, corner_radius=15,            fg_color=self.sidebar_color, text_color=self.text_color,            button_color=self.button_color        )        self.inspection_option.grid(row=0, column=4, padx=(5, 20))        # --- Yeni bile≈üenlerin sonu ---        # Sidebar        self.sidebar = ctk.CTkFrame(            self.root,            width=150, height=400, corner_radius=10,            fg_color=self.sidebar_color, bg_color=self.bg_color        )        self.sidebar.place(x=-150, y=10)        # Sidebar i√ßeriƒüi        self.sidebar_button_araclar = ctk.CTkButton(            self.sidebar, text="Bor√ßlu Ara√ßlar",            corner_radius=15,            fg_color=self.button_color,            text_color=self.text_color        )        self.sidebar_button_araclar.pack(pady=(40,10), padx=10)        self.sidebar_button_muayene = ctk.CTkButton(            self.sidebar, text="Muayene Tarihi\nGe√ßen Ara√ßlar",            corner_radius=15,            fg_color=self.button_color,            text_color=self.text_color        )        self.sidebar_button_muayene.pack(pady=(5,10))        self.sidebar_button_ceza = ctk.CTkButton(            self.sidebar, text="Cezasƒ± √ñdenmemi≈ü\nAra√ßlar",            corner_radius=15,            fg_color=self.button_color,            text_color=self.text_color        )        self.sidebar_button_ceza.pack(pady=(5,10))        self.sidebar_button_sigorta = ctk.CTkButton(            self.sidebar, text="Sigortasƒ± Ge√ßen\nAra√ßlar",            corner_radius=15,            fg_color=self.button_color,            text_color=self.text_color        )        self.sidebar_button_sigorta.pack(pady=(5,10))        self.sidebar_button_kasko = ctk.CTkButton(            self.sidebar, text="Kaskosu Ge√ßen\nAra√ßlar",            corner_radius=15,            fg_color=self.button_color,            text_color=self.text_color        )        self.sidebar_button_kasko.pack(pady=(5,10))        # Toggle butonu        self.toggle_button = None        self.create_toggle_button()        # Sidebar'ƒ± a√ßƒ±lƒ±≈üta g√∂ster        self.animate_sidebar(opening=True)        # buttons_frame olu≈üturulduktan sonra:        self.buttons_frame = ctk.CTkScrollableFrame(self.main_frame, fg_color=self.bg_color)        self.buttons_frame.pack(fill="both", expand=True, padx=10, pady=10)        # Buton √ºreticisini tanƒ±mla        self.button_factory = AracButtonFactory(            parent_frame=self.buttons_frame,            button_color=self.button_color,            hover_color=self.hover_color,  # Bu parametre AracButtonFactory i√ßindeyse orada kaldƒ±rmanƒ±z gerekebilir.            text_color=self.text_color        )        # Yeniden boyutlanƒ±nca butonlarƒ± yeniden konumla        self.buttons_frame.bind("<Configure>", lambda event: self.button_factory.create_buttons())        # Frame y√ºklendikten sonra butonlarƒ± yerle≈ütir        self.root.after(100, self.button_factory.create_buttons)    def search_action(self):        search_text = self.search_entry.get()        print(f"Arama yapƒ±lƒ±yor: {search_text}")    def animate_sidebar(self, opening=True):        target_x = 10 if opening else -170        current_x = self.sidebar.winfo_x()        step = max(abs(target_x - current_x) // 10, 5)        def step_animation():            nonlocal current_x            if (opening and current_x < target_x) or (not opening and current_x > target_x):                current_x += step if opening else -step                self.sidebar.place(x=current_x, y=10)                self.root.after(10, step_animation)            else:                self.sidebar.place(x=target_x, y=10)        step_animation()    def create_toggle_button(self):        if self.toggle_button:            self.toggle_button.place_forget()        corner = 15        if self.sidebar_visible:            parent = self.sidebar            bg = self.sidebar_color            x = 60            y = 0            text = "X"        else:            parent = self.root            bg = self.bg_color            x = 10            y = 10            text = "‚ò∞"        self.toggle_button = ctk.CTkButton(            parent,            text=text,            width=30, height=30,            font=("Arial", 14, "bold"),            corner_radius=corner,            fg_color=self.button_color,            text_color=self.text_color,            bg_color=bg,            command=self.toggle_sidebar        )        self.toggle_button.place(x=x, y=y)    def toggle_sidebar(self):        self.animate_sidebar(opening=not self.sidebar_visible)        self.sidebar_visible = not self.sidebar_visible        self.create_toggle_button()